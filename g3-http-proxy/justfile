set export := true
g3_version := "1.10.4"
build_target := "${CARGO_BUILD_TARGET:-aarch64-apple-darwin}"

# run `just` in the CLI to see the list of shortcuts
_default:
	just --list

# verify the existence of critical tools
verify:
	@rustup --version
	@cargo --version
	@docker --version
	@git --version

# install all required packages using brew
setup: verify
	brew install pkgconf capnp c-ares
	# brew install openssl
	# brew install lua
	# brew install python

# build binary and docker image using a given version
build version=g3_version: verify
	@echo ""
	@echo "Using G3 version {{version}}"
	@echo "Veryfying existence of critical tools"
	@echo ""

	@echo "Clone from GIT {{version}}..."
	-@rm -rf ./g3
	-@rm -rf ./g3proxy
	@git config --global advice.detachedHead false
	@git clone --depth 1 --branch g3proxy-v{{version}} --quiet https://github.com/bytedance/g3.git
	@echo ""

	@echo "Build with Rust for {{build_target}}..."
	@rustup target add {{build_target}}
	@cross build \
		--target {{build_target}} \
		--profile release-lto \
		--no-default-features \
		--features quic,c-ares \
		-p g3proxy \
		--manifest-path g3/Cargo.toml
	@mv ./g3/target/{{build_target}}/release-lto/g3proxy ./g3proxy
	-@rm -rf g3
	@./g3proxy --version

	@docker build -t g3proxy --platform "linux/amd64" .
	-@echo "Image size: $(docker images g3proxy --format json | jq -r .Size)"

# list rustup targets
targets:
	@rustup target list

cleanup:
	-rm -rf g3
	-docker rmi alpine
	-docker rmi g3proxy
	-docker image prune -f
